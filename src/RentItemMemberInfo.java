import java.util.Date;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
/**
 *
 * @author anearcan
 */
public class RentItemMemberInfo extends javax.swing.JFrame {
    private static Employee employee;
    private static MemberAccount member;
    private static Item[] items = new Item [50];//this is stored so as to be able to pass it into the next  window frame
    private static String[] scannedItemsTitle = new String[50];//only the titles of the items are needed in this window frame
    private static int count = 0;
    static DefaultListModel listModel = new DefaultListModel();
    private Date today = new java.util.Date();
    private RentControl control;
    private Rental rental = new Rental();
    private static JFrame frame = new JFrame(); 
 
    /* Creates new form RentItemMemberInfo */
    public RentItemMemberInfo() throws SQLException {
        initComponents();
        control = new RentControl(today);
        employee = new Employee(33, "ottawa canadaw 28 ", 613878179, "aeakai@yahoo.com");
        rentedItemList = new JList(listModel);
    }

    public RentItemMemberInfo(Employee employee) throws SQLException {
        initComponents();
        control = new RentControl(today);
        this.employee = employee;
        rentedItemList = new JList(listModel);    
    }
    
    
    public RentItemMemberInfo(Employee employee, Item item) throws SQLException {
        initComponents();
        control = new RentControl(today);
        this.employee = employee;
        rentedItemList = new JList(listModel);
   
        // Add item to list immediately
        listModel.addElement(item.getTitle());
        items[count] = item;
        scannedItemsTitle[count] = item.getTitle();
        count++;
   }

    //Scans item and add item to list of scanned items.
    public static void addItemsToList(){
        String id = null;
        
        do{
            id = (String)JOptionPane.showInputDialog(frame, "Scan Item(enter 0 to stop)","Rent",JOptionPane.PLAIN_MESSAGE);                
            
            String queryGames = "SELECT id, title, rentalPrice FROM games where id = "+ id;
            String queryMovies = "SELECT id, title, rentalPrice FROM movies where id = " + id;
           
            try {
                Utility.connect();
                PreparedStatement gameStmt = Utility.con.prepareStatement(queryGames);
                PreparedStatement movieStmt = Utility.con.prepareStatement(queryMovies);
                
                
                ResultSet rsGame = gameStmt.executeQuery();
                while (rsGame.next() && count < scannedItemsTitle.length) {
                    
                     listModel.addElement(rsGame.getString("title") + "  $"+ rsGame.getInt("rentalPrice"));
                     //Select the new item and make it visible.
                    rentedItemList.setSelectedIndex(count);
                    rentedItemList.ensureIndexIsVisible(count);
 
                }

                ResultSet rsMovies = movieStmt.executeQuery();
                while(rsMovies.next()&& count < scannedItemsTitle.length){
                     listModel.addElement(rsMovies.getString("Title") + " $" + rsMovies.getInt("rentalPrice"));
                     //Select the new item and make it visible.                     
                    rentedItemList.setSelectedIndex(count);
                    rentedItemList.ensureIndexIsVisible(count);
                }
                count++;
                
                Utility.con.close();
            } //end try

            catch(ClassNotFoundException e) {
                e.printStackTrace();
            }

            catch(SQLException e) {
                e.printStackTrace();
            }
        }while(!id.equalsIgnoreCase("0"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        memberID = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rentedItemList = new javax.swing.JList();
        rentButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rent Item");

        jLabel1.setText("Member ID");

        memberID.setText("000005");

        jLabel3.setText("Items to rent:");

        rentedItemList.setModel(listModel);
        jScrollPane1.setViewportView(rentedItemList);

        rentButton.setText("Rent");
        rentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(memberID))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(245, Short.MAX_VALUE)
                .addComponent(rentButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(memberID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(rentButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void rentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentButtonActionPerformed
      for(int i = 0; i< count; i++){
            try {
                rental =  control.rent(member, employee, items[i], items[i].getRentalPrice(), today, 
                       new Utility().addDays(today, 3));
            } catch (SQLException ex) {
                Logger.getLogger(RentItemMemberInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
      }
      new PaymentPage(employee, member, items).setVisible(true);
      this.setVisible(false);
}//GEN-LAST:event_rentButtonActionPerformed

    /**
     * @param args the command line arguments
     */
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RentItemMemberInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RentItemMemberInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RentItemMemberInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RentItemMemberInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    new RentItemMemberInfo().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(RentItemMemberInfo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        String s = (String)JOptionPane.showInputDialog(frame,"Scan Membership Card\n","Confirm Membership",
                JOptionPane.PLAIN_MESSAGE, null, null,null);
   
        try {
            memberID.setText(s);
            ResultSet rs = new Utility().stmt.executeQuery("SELECT * FROM members WHERE MemberID = " + Integer.parseInt(s));
            while(rs.next()){
                member = new MemberAccount(Integer.parseInt(s), rs.getString("FirstName"), rs.getString("LastName"),
                                rs.getString("email"), (int)rs.getLong("PhoneNumber"));
                member.setAddress(rs.getString("Address"));
                member.setStatus(rs.getString("Status"));
                member.setTotalCharge(rs.getFloat("accountBalance"));            
            }
       } catch (SQLException ex) {
            Logger.getLogger(AdminLoginSuccess.class.getName()).log(Level.SEVERE, null, ex);
       }
       addItemsToList();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JLabel memberID;
    private javax.swing.JButton rentButton;
    private static javax.swing.JList rentedItemList;
    // End of variables declaration//GEN-END:variables
}
