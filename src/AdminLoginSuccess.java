
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.sql.*;
/**
 *
 * @author anearcan
 */

public class AdminLoginSuccess extends javax.swing.JFrame{
    private Employee employee;
    private PurchasePayment purchasePay;
    private UpdateAccount updateAcc;    
    private final RenewMembershipPayment renew;
    private MemberAccount member;
    private RentItemMemberInfo rent;
    private final SearchResults search;
    private final ReturnItem returnIt;

/*
    private final CreateAccount createAcc;
    private final MakeReservation reserve;
    private final PaymentPage payment;
    private CancelReservation cancelReserve;
    private final SuspendPrivileges suspend;
    private final RemoveItem remove_item;
    private final AddItem add_item;
*/
    /** Creates new form AdminLoginSuccess */
    
    public AdminLoginSuccess() throws SQLException, ClassNotFoundException {
        initComponents();
        employee = new Employee(33, "ottawa canadaw 28 ", 613878179, "aeakai@yahoo.com");
        purchasePay= new PurchasePayment(this.employee);
        renew = new RenewMembershipPayment(this.employee);
        search = new SearchResults(this.employee);
        returnIt = new ReturnItem(this.employee);
  
        /*
        createAcc = new CreateAccount(this.employee);
        reserve = new MakeReservation(this.employee);
        payment = new PaymentPage(this.employee);
        suspend = new SuspendPrivileges(this.employee);
        add_item = new AddItem(this.employee);
        remove_item = new RemoveItem(this.employee);
         */
        new Utility().connect();
    }

    AdminLoginSuccess(Employee employee) throws ClassNotFoundException, SQLException {
        initComponents();
       // reserve = null;
        this.employee = employee;
        purchasePay= new PurchasePayment(this.employee);
        renew = new RenewMembershipPayment(this.employee);
        search = new SearchResults(this.employee);
        returnIt = new ReturnItem(this.employee);

        /*
        createAcc = new CreateAccount(this.employee);
        payment = new PaymentPage(this.employee);
        suspend = new SuspendPrivileges(this.employee);
        add_item = new AddItem(this.employee);
        remove_item = new RemoveItem(this.employee);
        */
        new Utility().connect();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createAccount = new javax.swing.JButton();
        makeReservation = new javax.swing.JButton();
        rentItem = new javax.swing.JButton();
        purchaseItem = new javax.swing.JButton();
        cancelReservation = new javax.swing.JButton();
        editAccountInfo = new javax.swing.JButton();
        removeItem = new javax.swing.JButton();
        addItem = new javax.swing.JButton();
        renewMembership = new javax.swing.JButton();
        suspension = new javax.swing.JButton();
        returnItem = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Successful Login[admin]");

        createAccount.setText("Create Account");
        createAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountActionPerformed(evt);
            }
        });

        makeReservation.setText("Make Reservation");
        makeReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeReservationActionPerformed(evt);
            }
        });

        rentItem.setText("Rent Item");
        rentItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentItemActionPerformed(evt);
            }
        });

        purchaseItem.setText("Purchase Item");
        purchaseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseItemActionPerformed(evt);
            }
        });

        cancelReservation.setText("Cancel Reservation");
        cancelReservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReservationActionPerformed(evt);
            }
        });

        editAccountInfo.setText("Update Account");
        editAccountInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAccountInfoActionPerformed(evt);
            }
        });

        removeItem.setText("Remove Item");
        removeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemActionPerformed(evt);
            }
        });

        addItem.setText("Add Item");
        addItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemActionPerformed(evt);
            }
        });

        renewMembership.setText("Renew Membership");
        renewMembership.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewMembershipActionPerformed(evt);
            }
        });

        suspension.setText("Suspend Privileges");
        suspension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suspensionActionPerformed(evt);
            }
        });

        returnItem.setText("Return Item");
        returnItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnItemActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(renewMembership)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                        .addComponent(suspension))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(addItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 263, Short.MAX_VALUE)
                        .addComponent(removeItem))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(createAccount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 221, Short.MAX_VALUE)
                        .addComponent(editAccountInfo))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(makeReservation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(rentItem)
                                .addGap(76, 76, 76)
                                .addComponent(returnItem)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(purchaseItem, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cancelReservation, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(purchaseItem)
                    .addComponent(rentItem)
                    .addComponent(returnItem))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelReservation)
                    .addComponent(makeReservation)
                    .addComponent(searchButton))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createAccount)
                    .addComponent(editAccountInfo))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suspension)
                    .addComponent(renewMembership))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addItem)
                    .addComponent(removeItem))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void purchaseItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseItemActionPerformed
// TODO add your handling code here:
    this.setVisible(false);
        try {
            purchasePay.main(null);
        } catch (SQLException ex) {
            Logger.getLogger(AdminLoginSuccess.class.getName()).log(Level.SEVERE, null, ex);
        }
    purchasePay.setVisible(true);
}//GEN-LAST:event_purchaseItemActionPerformed

private void editAccountInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAccountInfoActionPerformed
        try {
            // TODO add your handling code here:
                updateAcc = new UpdateAccount(this.employee);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AdminLoginSuccess.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AdminLoginSuccess.class.getName()).log(Level.SEVERE, null, ex);
        }
    this.setVisible(false);
    updateAcc.setVisible(true);
}//GEN-LAST:event_editAccountInfoActionPerformed

private void renewMembershipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewMembershipActionPerformed
    //use dialog box askin to scan card 1st.
    String s = (String)JOptionPane.showInputDialog(this,"Scan Membership Card\n","Confirm Membership",
                JOptionPane.PLAIN_MESSAGE, null, null,null);
    try {
        member.setMemberID(Integer.parseInt(s));
        ResultSet rs = Utility.stmt.executeQuery("SELECT * FROM members WHERE MemberID = " + Integer.parseInt(s));
        while(rs.next()){
            member.setFirstName(rs.getString("FirstName"));
            member.setLastName(rs.getString("LastName"));
            member.setEmail(rs.getString("email"));
            member.setAddress(rs.getString("Address"));
            member.setStatus(rs.getString("Status"));
            member.setTotalCharge(rs.getFloat("accountBalance"));
            
        }
    } catch (SQLException ex) {
        Logger.getLogger(AdminLoginSuccess.class.getName()).log(Level.SEVERE, null, ex);
    }
     renew.setMember(member);
    this.setVisible(false);
    renew.setVisible(true);

}//GEN-LAST:event_renewMembershipActionPerformed

private void rentItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentItemActionPerformed
        try {
            rent = new RentItemMemberInfo(this.employee);
        } catch (SQLException ex) {
            Logger.getLogger(AdminLoginSuccess.class.getName()).log(Level.SEVERE, null, ex);
        }
    this.setVisible(false);
    rent.main(null);
    rent.setVisible(true);
}//GEN-LAST:event_rentItemActionPerformed

private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
// TODO add your handling code here:
    this.setVisible(false);
    search.setVisible(true);
    
}//GEN-LAST:event_searchButtonActionPerformed

private void returnItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnItemActionPerformed
// TODO add your handling code here:
    String s = (String)JOptionPane.showInputDialog(this,"Scan Membership Card\n","Confirm Membership",
                JOptionPane.PLAIN_MESSAGE, null, null,null);

    this.setVisible(false);
    returnIt.setVisible(true);

}//GEN-LAST:event_returnItemActionPerformed
/*
private void makeReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeReservationActionPerformed
// TODO add your handling code here:
    Reservation [] reservations = new Reservation[10];
    String s = (String)JOptionPane.showInputDialog(this,"Scan Membership Card\n","Confirm Membership",
                JOptionPane.PLAIN_MESSAGE, null, null,null);
    
    String queryMember = "SELECT MemberID, FirstName, LastName, email, PhoneNumber, reservations  FROM members WHERE id = " + Integer.parseInt(s);
    String reservationString = null;
    
    try {
            ResultSet rs = Utility.stmt.executeQuery(queryMember);

            while (rs.next()) {
                member = new MemberAccount(rs.getInt("MemberID"),rs.getString("FirstName"), rs.getString("LastName"), 
                        rs.getString("email"),rs.getInt("PhoneNumber"));
                reservationString = rs.getString("reservations");
                
            } //end while
            for(int i = 0; i<reservationString.split(", ").length; i++){
                reservations[i].setReservationId(Integer.parseInt(reservationString.split(", ")[i]));
            }
            member.setReservations(reservations);
            
            Utility.con.close();
        } //end try
        
        catch(SQLException e) {e.printStackTrace();}
    
    new MakeReservation(this.employee, member);
    this.setVisible(false);

}//GEN-LAST:event_makeReservationActionPerformed

private void cancelReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReservationActionPerformed
// TODO add your handling code here:
     Reservation [] reservations = new Reservation[10];
    String s = (String)JOptionPane.showInputDialog(this,"Scan Membership Card\n","Customized Dialog",
                    JOptionPane.PLAIN_MESSAGE, null, null,null);
    String reservationString = null;

    String queryMember = "SELECT MemberID, FirstName, LastName, email, PhoneNumber, reservations  FROM members WHERE id = " + Integer.parseInt(s);

    try {
            ResultSet rs = Utility.stmt.executeQuery(queryMember);

            while (rs.next()) {
                member = new MemberAccount(rs.getInt("MemberID"),rs.getString("FirstName"), rs.getString("LastName"), 
                        rs.getString("email"),rs.getInt("PhoneNumber"));
                reservationString = rs.getString("reservations");
                
            } //end while
            for(int i = 0; i<reservationString.split(", ").length; i++){
                reservations[i].setReservationId(Integer.parseInt(reservationString.split(", ")[i]));
            }
            member.setReservations(reservations);
            
                
            Utility.con.close();
        } //end try
        catch(SQLException e) {e.printStackTrace();}

    cancelReserve = new CancelReservation(this.employee, member);
    this.setVisible(false);
    cancelReserve.setVisible(true);
}//GEN-LAST:event_cancelReservationActionPerformed

private void createAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountActionPerformed
// TODO add your handling code here:
    
    this.setVisible(false);
    createAcc.setVisible(true);

}//GEN-LAST:event_createAccountActionPerformed

private void suspensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspensionActionPerformed
// TODO add your handling code here:
        String s = (String)JOptionPane.showInputDialog(this,"Scan Membership Card\n","Confirm Membership",
                JOptionPane.PLAIN_MESSAGE, null, null,null);

    this.setVisible(false);
        suspend.setVisible(true);

}//GEN-LAST:event_suspensionActionPerformed

private void addItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemActionPerformed
// TODO add your handling code here:
        
        this.setVisible(false);
        add_item.setVisible(true);

}//GEN-LAST:event_addItemActionPerformed

private void removeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemActionPerformed
// TODO add your handling code here:
        this.setVisible(false);
        remove_item.setVisible(true);

}//GEN-LAST:event_removeItemActionPerformed
*/

  public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminLoginSuccess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminLoginSuccess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminLoginSuccess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminLoginSuccess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new AdminLoginSuccess().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminLoginSuccess.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(AdminLoginSuccess.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItem;
    private javax.swing.JButton cancelReservation;
    private javax.swing.JButton createAccount;
    private javax.swing.JButton editAccountInfo;
    private javax.swing.JButton makeReservation;
    private javax.swing.JButton purchaseItem;
    private javax.swing.JButton removeItem;
    private javax.swing.JButton renewMembership;
    private javax.swing.JButton rentItem;
    private javax.swing.JButton returnItem;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton suspension;
    // End of variables declaration//GEN-END:variables
}
